// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/ShevelevEvgeniy/kafkaManager/internal/dto"
	mock "github.com/stretchr/testify/mock"
)

// OrderService is an autogenerated mock type for the OrderService type
type OrderService struct {
	mock.Mock
}

// SaveOrderMessage provides a mock function with given fields: ctx, order, requestId
func (_m *OrderService) SaveOrderMessage(ctx context.Context, order dto.Order, requestId string) error {
	ret := _m.Called(ctx, order, requestId)

	if len(ret) == 0 {
		panic("no return value specified for SaveOrderMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Order, string) error); ok {
		r0 = rf(ctx, order, requestId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStatusOrderMessage provides a mock function with given fields: ctx, _a1
func (_m *OrderService) UpdateStatusOrderMessage(ctx context.Context, _a1 dto.OrderMessageResponse) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatusOrderMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.OrderMessageResponse) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOrderService creates a new instance of OrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderService {
	mock := &OrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
