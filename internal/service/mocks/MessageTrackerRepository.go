// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	message_tracker_repository "github.com/ShevelevEvgeniy/kafkaManager/internal/postgres/repository/message_tracker_repository"
	mock "github.com/stretchr/testify/mock"
)

// MessageTrackerRepository is an autogenerated mock type for the MessageTrackerRepository type
type MessageTrackerRepository struct {
	mock.Mock
}

// GetMessageByRequestId provides a mock function with given fields: ctx, requestId
func (_m *MessageTrackerRepository) GetMessageByRequestId(ctx context.Context, requestId string) (string, error) {
	ret := _m.Called(ctx, requestId)

	if len(ret) == 0 {
		panic("no return value specified for GetMessageByRequestId")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, requestId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, requestId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, requestId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveMessage provides a mock function with given fields: ctx, model
func (_m *MessageTrackerRepository) SaveMessage(ctx context.Context, model message_tracker_repository.Model) error {
	ret := _m.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for SaveMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, message_tracker_repository.Model) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMessageStatusByRequestId provides a mock function with given fields: ctx, model
func (_m *MessageTrackerRepository) UpdateMessageStatusByRequestId(ctx context.Context, model message_tracker_repository.Model) error {
	ret := _m.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMessageStatusByRequestId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, message_tracker_repository.Model) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMessageTrackerRepository creates a new instance of MessageTrackerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageTrackerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageTrackerRepository {
	mock := &MessageTrackerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
