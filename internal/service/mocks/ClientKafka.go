// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v2kafka "github.com/confluentinc/confluent-kafka-go/v2/kafka"
)

// ClientKafka is an autogenerated mock type for the ClientKafka type
type ClientKafka struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *ClientKafka) Close() {
	_m.Called()
}

// CreateTopic provides a mock function with given fields: ctx, topics
func (_m *ClientKafka) CreateTopic(ctx context.Context, topics []string) error {
	ret := _m.Called(ctx, topics)

	if len(ret) == 0 {
		panic("no return value specified for CreateTopic")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, topics)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListenToTopic provides a mock function with given fields: ctx, topic
func (_m *ClientKafka) ListenToTopic(ctx context.Context, topic string) (<-chan *v2kafka.Message, <-chan error) {
	ret := _m.Called(ctx, topic)

	if len(ret) == 0 {
		panic("no return value specified for ListenToTopic")
	}

	var r0 <-chan *v2kafka.Message
	var r1 <-chan error
	if rf, ok := ret.Get(0).(func(context.Context, string) (<-chan *v2kafka.Message, <-chan error)); ok {
		return rf(ctx, topic)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan *v2kafka.Message); ok {
		r0 = rf(ctx, topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *v2kafka.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) <-chan error); ok {
		r1 = rf(ctx, topic)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	return r0, r1
}

// SendMessage provides a mock function with given fields: ctx, key, value, topic
func (_m *ClientKafka) SendMessage(ctx context.Context, key []byte, value []byte, topic string) error {
	ret := _m.Called(ctx, key, value, topic)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, []byte, string) error); ok {
		r0 = rf(ctx, key, value, topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscribeToTopics provides a mock function with given fields: ctx, topic
func (_m *ClientKafka) SubscribeToTopics(ctx context.Context, topic string) error {
	ret := _m.Called(ctx, topic)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeToTopics")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewClientKafka creates a new instance of ClientKafka. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientKafka(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientKafka {
	mock := &ClientKafka{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
